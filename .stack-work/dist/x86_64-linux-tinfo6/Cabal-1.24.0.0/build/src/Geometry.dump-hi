
==================== FINAL INTERFACE ====================
2018-07-09 20:56:51.635121327 UTC

interface gllib-0.1.0.0-7vgdlXxVJwD1kkF9yyXzwT:Geometry 8001
  interface hash: b58db3e6f07e073ea91bcfb9202d9056
  ABI hash: b10b54794538e570add23a3b49ea9804
  export-list hash: 143ce5ed8dd6d622b350b359b49930db
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7a8231e202c02f6359adc1a36da874bc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Geometry.cross
  Geometry.crossProduct
  Geometry.e1
  Geometry.e2
  Geometry.e3
  Geometry.e4
  Geometry.identity
  Geometry.p3
  Geometry.point3
  Geometry.rotate3
  Geometry.rotateX
  Geometry.rotateY
  Geometry.rotateZ
  Geometry.scale3
  Geometry.scaleUniform
  Geometry.scaleUniform3
  Geometry.t3
  Geometry.tensor4
  Geometry.translate
  Geometry.triangleNormal
  Geometry.v3
  Geometry.vector3
  LinAlg.Homogenizable{LinAlg.dehomogenize LinAlg.homogenize}
  LinAlg.Point3{LinAlg.Point3}
  LinAlg.Vec3{LinAlg.Vec3}
module dependencies: LinAlg Utils
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:GHC.Float 469226b1bc53433e95d0167dec5d0312
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  LinAlg 2fda7d8c21b2891c403a8ca2bc84537e
  exports: 5319308500b79c249305bf8a6f3dfa12
  *# 1425fc15cdefa6a8b51e2384cdea1c4e
  /# bee08886f6d6d87be36bafcb6bf9e15f
  Homogenizable 3c8060a56daf958d9a811416c8235a52
  Mat4 dc5def3bee1deb8f493473663dfb4657
  Mat4 f48d9ee945d73f4a5f68d747f3967607
  Point3 35f673f087fd6ea9bdf059f28c8585fc
  Point3 cb5121f112964add8c441c87d877e1d0
  Vec3 612757d7fc79515f94281ffe21894d69
  Vec3 af0264ef4c5439016c6b5a03ae914a6c
  Vec4 9fcd860e973a3ff408d82033d9c74854
  Vec4 4e967cd2124bf4a10865b8598081d4bf
  basicMat4 9b9fb6a1add350a914a4039ab33c7725
  dehomogenize 9fc358f0c8d1c759ad2df398bfa3e33c
  diagMat4 4d331cb36ad364d192bfd6a206fc519f
  difference a30d16f5aa006558923917ad3ff9a085
  homogenize 609843129e27e27f5247a10015c575dc
  lcombG 2ca1bd8d2bc0d6934d30619c40f0589d
  normalize bd2c85cee1990e85d2206b2c14fab3c9
  sqLen b9af4736b1b11f7177d63047324d1b5b
  zero' 483b587240036bed9457a48ccccd1b5f
de42b5ec08b8dd75f04542966ddcff08
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Geometry.$trModule2
                   Geometry.$trModule1) -}
81ac121b592f1f516a7dd7bbb2b37298
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Geometry"#) -}
82e4076d5ed27d60043498405d25a284
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "gllib-0.1.0.0-7vgdlXxVJwD1kkF9yyXzwT"#) -}
7689942c9e5450384d70b1a8bad91077
  $wcross ::
    GHC.Num.Num a => a -> a -> a -> a -> a -> a -> (# a, a, a #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A)><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (ww :: a)
                   (ww1 :: a)
                   (ww2 :: a)
                   (ww3 :: a)
                   (ww4 :: a)
                   (ww5 :: a) ->
                 (# GHC.Num.-
                      @ a
                      w
                      (GHC.Num.* @ a w ww1 ww5)
                      (GHC.Num.* @ a w ww2 ww4),
                    GHC.Num.- @ a w (GHC.Num.* @ a w ww2 ww3) (GHC.Num.* @ a w ww ww5),
                    GHC.Num.-
                      @ a
                      w
                      (GHC.Num.* @ a w ww ww4)
                      (GHC.Num.* @ a w ww1 ww3) #)) -}
b629e3d9b09f94a511a6aed7e0f4787d
  $wcrossProduct ::
    GHC.Num.Num a =>
    a
    -> a
    -> a
    -> (# LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(U),A,A,C(U))><L,U><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: a)
                   (w2 :: a)
                   (w3 :: a) ->
                 (# LinAlg.Vec4
                      @ a
                      (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                      w3
                      (GHC.Num.negate @ a w w2)
                      (GHC.Num.fromInteger @ a w Geometry.crossProduct1),
                    LinAlg.Vec4
                      @ a
                      (GHC.Num.negate @ a w w3)
                      (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                      w1
                      (GHC.Num.fromInteger @ a w Geometry.crossProduct1),
                    LinAlg.Vec4
                      @ a
                      w2
                      (GHC.Num.negate @ a w w1)
                      (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                      (GHC.Num.fromInteger @ a w Geometry.crossProduct1),
                    LinAlg.$fVectorVec4_$czero' @ a w #)) -}
39b239427fa17572c67606134bee9c89
  $wrotateX ::
    GHC.Float.Floating a =>
    a
    -> (# LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a (w :: GHC.Float.Floating a) (w1 :: a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a = GHC.Float.$p1Floating @ a w
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 (# Geometry.e1 @ a $dNum,
                    LinAlg.Vec4
                      @ a
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)
                      (GHC.Float.cos @ a w w1)
                      (GHC.Float.sin @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1),
                    LinAlg.Vec4
                      @ a
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)
                      (GHC.Num.negate @ a $dNum (GHC.Float.sin @ a w w1))
                      (GHC.Float.cos @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1),
                    Geometry.e4 @ a $dNum #)) -}
3f76d084272a152d49ba3845d18a87e7
  $wrotateY ::
    GHC.Float.Floating a =>
    a
    -> (# LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a (w :: GHC.Float.Floating a) (w1 :: a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a = GHC.Float.$p1Floating @ a w
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 (# LinAlg.Vec4
                      @ a
                      (GHC.Float.cos @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)
                      (GHC.Num.negate @ a $dNum (GHC.Float.sin @ a w w1))
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1),
                    Geometry.e2 @ a $dNum,
                    LinAlg.Vec4
                      @ a
                      (GHC.Float.sin @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)
                      (GHC.Float.cos @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1),
                    Geometry.e4 @ a $dNum #)) -}
081a35dc2bc9436874668c8ef78aa053
  $wrotateZ ::
    GHC.Float.Floating a =>
    a
    -> (# LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a, LinAlg.Vec4 a #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>,
     Inline: [0],
     Unfolding: (\ @ a (w :: GHC.Float.Floating a) (w1 :: a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a = GHC.Float.$p1Floating @ a w
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 (# LinAlg.Vec4
                      @ a
                      (GHC.Float.cos @ a w w1)
                      (GHC.Float.sin @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1),
                    LinAlg.Vec4
                      @ a
                      (GHC.Num.negate @ a $dNum (GHC.Float.sin @ a w w1))
                      (GHC.Float.cos @ a w w1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)
                      (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1),
                    Geometry.e3 @ a $dNum, Geometry.e4 @ a $dNum #)) -}
b8cd9e4f42d8e8e12c5a5dc642f152a0
  cross ::
    GHC.Num.Num a => LinAlg.Vec3 a -> LinAlg.Vec3 a -> LinAlg.Vec3 a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)),C(C1(U)),A,A,A,A)><S,1*U(U,U,U)><S,1*U(U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: LinAlg.Vec3 a)
                   (w2 :: LinAlg.Vec3 a) ->
                 case w1 of ww { LinAlg.Vec3 ww1 ww2 ww3 ->
                 case w2 of ww4 { LinAlg.Vec3 ww5 ww6 ww7 ->
                 case Geometry.$wcross
                        @ a
                        w
                        ww1
                        ww2
                        ww3
                        ww5
                        ww6
                        ww7 of ww8 { (#,,#) ww9 ww10 ww11 ->
                 LinAlg.Vec3 @ a ww9 ww10 ww11 } } }) -}
f3240d3498aef8b61e9c800d5a358e82
  crossProduct :: GHC.Num.Num a => a -> a -> a -> LinAlg.Mat4 a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(U),A,A,C(U))><L,U><L,U><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a (w :: GHC.Num.Num a) (w1 :: a) (w2 :: a) (w3 :: a) ->
                 case Geometry.$wcrossProduct
                        @ a
                        w
                        w1
                        w2
                        w3 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 LinAlg.Mat4 @ a ww1 ww2 ww3 ww4 }) -}
4bb398e5c475faad141998d6a9aa72ed
  crossProduct1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
b90f8850d66ccca126a4a62f7746a877
  e1 :: GHC.Num.Num a => LinAlg.Vec4 a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,A,A,A,A,A,C(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 LinAlg.Vec4
                   @ a
                   (GHC.Num.fromInteger @ a w Geometry.e7)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)) -}
1483264e0f3453dbb0222a8f182af779
  e2 :: GHC.Num.Num a => LinAlg.Vec4 a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,A,A,A,A,A,C(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 LinAlg.Vec4
                   @ a
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.e7)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)) -}
e2a4c441bfe6a92852a3edbd24091995
  e3 :: GHC.Num.Num a => LinAlg.Vec4 a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,A,A,A,A,A,C(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 LinAlg.Vec4
                   @ a
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.e7)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)) -}
33591b0f14019626b57f503eebe49333
  e4 :: GHC.Num.Num a => LinAlg.Vec4 a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,A,A,A,A,A,C(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 LinAlg.Vec4
                   @ a
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.crossProduct1)
                   (GHC.Num.fromInteger @ a w Geometry.e7)) -}
6db13523ffbc17c73447421ea2a49cc9
  e7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
71a581107dea53de7ac21d8bad553bb4
  identity :: GHC.Num.Num a => LinAlg.Mat4 a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(A,A,A,A,A,A,C(U))>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 LinAlg.Diag4
                   @ a
                   (GHC.Num.fromInteger @ a w Geometry.e7)
                   (GHC.Num.fromInteger @ a w Geometry.e7)
                   (GHC.Num.fromInteger @ a w Geometry.e7)
                   (GHC.Num.fromInteger @ a w Geometry.e7)) -}
be38e2d044e10df4a6a7ad570f86f9ab
  p3 :: (a -> a -> a -> d) -> LinAlg.Point3 a -> d
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ d (f :: a -> a -> a -> d) (ds :: LinAlg.Point3 a) ->
                 case ds of wild { LinAlg.Point3 x y z -> f x y z }) -}
bb15aa7b3dcf841223cdf738dcc719b5
  point3 :: GHC.Num.Num a => a -> a -> a -> LinAlg.Vec4 a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U><L,U><L,U>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) (y :: a) (z :: a) ->
                 LinAlg.Vec4
                   @ a
                   x
                   y
                   z
                   (GHC.Num.fromInteger @ a $dNum Geometry.e7)) -}
23d8686017351085169c6d8ea0556ae3
  rotate3 ::
    GHC.Float.Floating a => a -> a -> a -> a -> LinAlg.Mat4 a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(U(U(U,U,U,U,U,U,U),U,U,U),A,A,A,C(U),A,A,1*C1(U),1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U><L,U><L,U> -}
b4afeaf611997565360896d7e8152951
  rotateX :: GHC.Float.Floating a => a -> LinAlg.Mat4 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Float.Floating a) (w1 :: a) ->
                 case Geometry.$wrotateX @ a w w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 LinAlg.Mat4 @ a ww1 ww2 ww3 ww4 }) -}
ad92945b6bd6f8c73c6de4298efdd3ca
  rotateY :: GHC.Float.Floating a => a -> LinAlg.Mat4 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Float.Floating a) (w1 :: a) ->
                 case Geometry.$wrotateY @ a w w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 LinAlg.Mat4 @ a ww1 ww2 ww3 ww4 }) -}
d6a7915216fe911994fcbb075945e869
  rotateZ :: GHC.Float.Floating a => a -> LinAlg.Mat4 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U,A,A,A,A,A,A,C(U),C(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Float.Floating a) (w1 :: a) ->
                 case Geometry.$wrotateZ @ a w w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 LinAlg.Mat4 @ a ww1 ww2 ww3 ww4 }) -}
7e8b68dc0fd96ef1e4c33e3f90ce6599
  scale3 :: GHC.Num.Num a => a -> a -> a -> LinAlg.Mat4 a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U><L,U><L,U>m2,
     Unfolding: InlineRule (4, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) (y :: a) (z :: a) ->
                 LinAlg.Diag4
                   @ a
                   x
                   y
                   z
                   (GHC.Num.fromInteger @ a $dNum Geometry.e7)) -}
3242185085b70a9d1164807f7c710b73
  scaleUniform :: GHC.Num.Num a => a -> LinAlg.Mat4 a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) ->
                 LinAlg.Diag4 @ a x x x x) -}
175b789e0279a95e6aa5585d0fe6a468
  scaleUniform3 :: GHC.Num.Num a => a -> LinAlg.Mat4 a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) ->
                 LinAlg.Diag4
                   @ a
                   x
                   x
                   x
                   (GHC.Num.fromInteger @ a $dNum Geometry.e7)) -}
21bf2d1afdc86322f20fbaec5159fb60
  t3 :: (a -> b -> c -> d) -> (a, b, c) -> d
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ b @ c @ d (f :: a -> b -> c -> d) (ds :: (a, b, c)) ->
                 case ds of wild { (,,) x y z -> f x y z }) -}
3a70478c4d4cefef2366b30a361bb7f3
  tensor4 ::
    GHC.Num.Num a => LinAlg.Vec4 a -> LinAlg.Vec4 a -> LinAlg.Mat4 a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,A,C(C1(U)),A,A,A,A)><S,1*U(U,U,U,U)><L,U(U,U,U,U)>m1,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Num.Num a)
                   (w1 :: LinAlg.Vec4 a)
                   (w2 :: LinAlg.Vec4 a) ->
                 case w1 of ww { LinAlg.Vec4 ww1 ww2 ww3 ww4 ->
                 LinAlg.Mat4
                   @ a
                   (LinAlg.$fVectorVec4_$c*# @ a w ww1 w2)
                   (LinAlg.$fVectorVec4_$c*# @ a w ww2 w2)
                   (LinAlg.$fVectorVec4_$c*# @ a w ww3 w2)
                   (LinAlg.$fVectorVec4_$c*# @ a w ww4 w2) }) -}
e017c4a9bd4724ae785b25cf9387cd27
  translate :: GHC.Num.Num a => a -> a -> a -> LinAlg.Mat4 a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,A,A,A,C(U))><L,U><L,U><L,U>m1,
     Unfolding: InlineRule (4, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) (y :: a) (z :: a) ->
                 LinAlg.Mat4
                   @ a
                   (Geometry.e1 @ a $dNum)
                   (Geometry.e2 @ a $dNum)
                   (Geometry.e3 @ a $dNum)
                   (LinAlg.Vec4
                      @ a
                      x
                      y
                      z
                      (GHC.Num.fromInteger @ a $dNum Geometry.e7))) -}
f440a33c65f30e50e49df7e510c04d79
  triangleNormal ::
    (GHC.Classes.Eq a, GHC.Float.Floating a) =>
    LinAlg.Point3 a
    -> LinAlg.Point3 a
    -> LinAlg.Point3 a
    -> GHC.Base.Maybe (LinAlg.Vec3 a)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,U(1*U,A,A,A,1*C1(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(U,U,U)><L,1*U(U,U,U)><L,1*U(U,U,U)>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   ($dFloating :: GHC.Float.Floating a)
                   (eta :: LinAlg.Point3 a)
                   (eta1 :: LinAlg.Point3 a)
                   (eta2 :: LinAlg.Point3 a) ->
                 let {
                   $dFractional :: GHC.Real.Fractional a
                   = GHC.Float.$p1Floating @ a $dFloating
                 } in
                 let {
                   $dNum :: GHC.Num.Num a = GHC.Real.$p1Fractional @ a $dFractional
                 } in
                 let {
                   prenormal :: LinAlg.Vec3 a
                   = case eta1 of ww { LinAlg.Point3 ww1 ww2 ww3 ->
                     case eta of ww4 { LinAlg.Point3 ww5 ww6 ww7 ->
                     case eta2 of ww11 { LinAlg.Point3 ww12 ww13 ww14 ->
                     case Geometry.$wcross
                            @ a
                            $dNum
                            (GHC.Num.- @ a $dNum ww1 ww5)
                            (GHC.Num.- @ a $dNum ww2 ww6)
                            (GHC.Num.- @ a $dNum ww3 ww7)
                            (GHC.Num.- @ a $dNum ww12 ww5)
                            (GHC.Num.- @ a $dNum ww13 ww6)
                            (GHC.Num.- @ a $dNum ww14 ww7) of ww15 { (#,,#) ww16 ww17 ww18 ->
                     LinAlg.Vec3 @ a ww16 ww17 ww18 } } } }
                 } in
                 let {
                   l :: a
                   = case prenormal of ww { LinAlg.Vec3 ww1 ww2 ww3 ->
                     LinAlg.$w$cdot @ a $dNum ww1 ww2 ww3 ww1 ww2 ww3 }
                 } in
                 case GHC.Classes.==
                        @ a
                        $dEq
                        l
                        (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1) of wild {
                   GHC.Types.False
                   -> GHC.Base.Just
                        @ (LinAlg.Vec3 a)
                        (case prenormal of ww { LinAlg.Vec3 ww1 ww2 ww3 ->
                         case LinAlg.$w$c/#
                                @ a
                                $dFractional
                                ww1
                                ww2
                                ww3
                                (GHC.Float.sqrt @ a $dFloating l) of ww4 { (#,,#) ww5 ww6 ww7 ->
                         LinAlg.Vec3 @ a ww5 ww6 ww7 } })
                   GHC.Types.True -> GHC.Base.Nothing @ (LinAlg.Vec3 a) }) -}
2ba15f797fe4b9b6553078a16fab5d97
  v3 :: (a -> a -> a -> d) -> LinAlg.Vec3 a -> d
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><S,1*U(U,U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a @ d (f :: a -> a -> a -> d) (ds :: LinAlg.Vec3 a) ->
                 case ds of wild { LinAlg.Vec3 x y z -> f x y z }) -}
6673d16edfead7dbe70daae3bb63eda3
  vector3 :: GHC.Num.Num a => a -> a -> a -> LinAlg.Vec4 a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U><L,U><L,U>m,
     Unfolding: InlineRule (4, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) (x :: a) (y :: a) (z :: a) ->
                 LinAlg.Vec4
                   @ a
                   x
                   y
                   z
                   (GHC.Num.fromInteger @ a $dNum Geometry.crossProduct1)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

